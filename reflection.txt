This project felt different from any of the other programming assignments I’ve done from the start. Instead of just working on a generic problem, I had to find a real person with a real need. I ended up creating a GPA calculator for a friend, and knowing that I was building something a person would actually use made the work more interesting. It’s easy to just go through the motions on an assignment, but it’s a completely different feeling when you’re trying to create a tool that works for someone. The whole process felt more like what a real programmer would do, and that was a great motivator for me. Building something functional from scratch was rewarding.

When it was time to write the code on my own, I felt confident at first. I was able to get the basic parts working without much trouble. I wrote the code that asks the user for their grade and credits, and I figured out the math needed to calculate the final GPA. The part where I got stuck was the loop. I knew that the program needed to ask the user for multiple classes, but I struggled to write a loop that would keep going until the user was finished. It was a big jump in thinking, going from a program that just runs from top to bottom to one that has to repeat steps. I spent a lot of time on this part, and it really showed me the difference between knowing a concept and actually being able to use it in practice.

Getting to see the AI’s code after I had tried it myself was a big help. I could immediately see that its version was better and more efficient than mine. The biggest difference was how it handled the loop. I had used a while True loop that needed a separate break command to stop it, which worked but felt messy. The AI used a simpler while loop that was controlled by a variable, which felt much cleaner. It also used shorthand like += to add to the totals, while I had written out the full calculation. My code had more lines and was more complicated, but both of our programs gave the same result. It showed that there are a lot of ways to solve a problem, but some are definitely better than others.

For the AI collaboration part of the project, I used Gemini. It was the tool I had available, and it was effective for translating my pseudocode and helping me analyze the code afterwards. Working with the AI was like having a guide. It was helpful to have a working example to look at after getting stuck. I understood some of the AI’s changes right away, like the += operator. For other things, like the different while loop, seeing its code made me do my own research to figure out why its way was better. The most surprising thing was that the AI seemed to focus on making the code as efficient as possible, even if that meant it was a little harder to understand at first glance. It showed me that good programmers think about getting the right answer, but also how to write smart and clean code.

I definitely learned a lot of practical skills from this project. I now feel like I can confidently use dictionaries, write loops that handle user input, and use more efficient operators in my own code without needing help. Looking back, the main thing I would do differently next time is spend more time planning before I start programming. I didn't really think about potential problems, or “edge cases,” like what would happen if the user didn’t enter any classes at all. If I had thought about that earlier and included it in my algorithm, the coding process would have been easier. I learned that having a solid plan makes a big difference and probably saves you time in the long run.